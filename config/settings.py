"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-bk2$5tw3dp$dnmy&b8vy1^703t#iky=hk!1k8kx2yc&(u34oqv'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django.contrib.sites",
    # django-rest-auth
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt.token_blacklist",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "drf_spectacular",
    # celery
    "django_celery_results",
    # django-allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.kakao",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.apple",
    # My App
    "api.accounts",
    "api.emails",
    "api.bulletin_board",
    "api.comment",
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django api_admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]

AUTH_USER_MODEL = "accounts.User"

REST_AUTH_SERIALIZERS = {
    "USER_DETAILS_SERIALIZER": "api.accounts.serializers.user.UserSerializer",
}
REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "api.accounts.serializers.signUp.CustomRegisterSerializer",
}

# social
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": "",
            "secret": os.environ.get("GOOGLE_SECRET_KEY"),
            "key": "",
        },
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    },
    # "apple": {
    #     "APP": {
    #         # Your service identifier.
    #         "client_id": os.environ.get("AUTH_APPLE_CLIENT_ID"),
    #         # The Key ID (visible in the "View Key Details" page).
    #         "secret": os.environ.get("AUTH_APPLE_KEY_ID"),
    #         # Member ID/App ID Prefix -- you can find it below your name
    #         # at the top right corner of the page, or it’s your App ID
    #         # Prefix in your App ID.(팀 ID)
    #         "key": os.environ.get("AUTH_APPLE_TEAM_ID"),
    #         # The certificate you downloaded when generating the key.
    #         "certificate_key": os.environ.get("AUTH_APPLE_PRIVATE_KEY").replace(
    #             "|n|", "\n"
    #         ),
    #     }
    # },
}
# apple return url
APPLE_RETURN_URL = os.environ.get("APPLE_RETURN_URL")

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "COERCE_DECIMAL_TO_STRING": False,
    # "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    # "PAGE_SIZE": 10,
    "DEFAULT_PERMISSION_CLASSES": (
        # "rest_framework.permissions.IsAuthenticated",  # 인증된 사용자만 접근 가능(로그인유저 authetication 으로 엑세스 토큰확인해서 하면되는것)
        # "rest_framework.permissions.IsAuthenticatedOrReadOnly",  # 인증된 사용자만 접근 가능 & 인증 안받은  사용자는 읽기(get함수 같은거) (로그인유저 authetication 으로 엑세스 토큰확인해서 하면되는것)
        # 'rest_framework.permissions.DjangoModelPermissions',
        # "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly", # 이건 읽기만 가능하기때문에 안됌
        # "rest_framework.permissions.IsAdminUser",  # is_staff가 True일떄 가능
        # "rest_framework.permissions.AllowAny",
    ),
    "DEFAULT_RENDERER_CLASSES": (
        # 자동으로 JSON으로 바꿔줌
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
        # "rest_framework.authentication.SessionAuthentication", # 이걸했을 때 CSRFToken을 발행함 (저 토큰은 아마 superuser인 사람한테서만 발급이 가능한 듯)
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
        # 'rest_framework.authentication.BasicAuthentication',
    ),
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
}
# slash
APPEND_SLASH = False

# docs
SPECTACULAR_SETTINGS = {
    # General schema metadata. Refer to spec for valid inputs
    # https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#openapi-object
    "TITLE": "drf-spectacular API Document",
    "DESCRIPTION": "drf-specatular 를 사용해서 만든 API 문서입니다.",
    # Optional: MAY contain "name", "url", "email"
    "CONTACT": {
        "name": "Simwanwoo",
        "url": "",
        "email": "test@gmail.com",
    },
    # Swagger UI를 좀더 편리하게 사용하기위해 기본옵션들을 수정한 값들입니다.
    "SWAGGER_UI_SETTINGS": {
        # https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/  <- 여기 들어가면 어떤 옵션들이 더 있는지 알수있습니다.
        "dom_id": "#swagger-ui",  # required(default)
        "layout": "BaseLayout",  # required(default)
        "deepLinking": True,  # API를 클릭할때 마다 SwaggerUI의 url이 변경됩니다. (특정 API url 공유시 유용하기때문에 True설정을 사용합니다)
        "persistAuthorization": True,  # True 이면 SwaggerUI상 Authorize에 입력된 정보가 새로고침을 하더라도 초기화되지 않습니다.
        "displayOperationId": True,  # True이면 API의 urlId 값을 노출합니다. 대체로 DRF api name둘과 일치하기때문에 api를 찾을때 유용합니다.
        "filter": True,  # True 이면 Swagger UI에서 'Filter by Tag' 검색이 가능합니다
    },
    # Optional: MUST contain "name", MAY contain URL
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,  # OAS3 Meta정보 API를 비노출 처리합니다.
    # https://www.npmjs.com/package/swagger-ui-dist 해당 링크에서 최신버전을 확인후 취향에 따라 version을 수정해서 사용하세요.
    "SWAGGER_UI_DIST": "//unpkg.com/swagger-ui-dist@3.38.0",  # Swagger UI 버전을 조절할수 있습니다.
    "COMPONENT_SPLIT_REQUEST": True,
}

# symple jwt 기반 세팅
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = "email"
# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_VERIFICATION = "none"

ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = "/?verification=1"
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = "/?verification=1"

# 소셜 로그인 커스텀 어댑터 설정
SOCIALACCOUNT_ADAPTER = "config.custom_social_adapter.SocialAccountAdapter"

SITE_ID = 1

REST_USE_JWT = True

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=3),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

MIDDLEWARE = [
    # CORS
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    # },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    # {
    #     "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    # },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
# STATIC_ROOT = "staticfiles"
# STATIC_URL = "/static/"
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATICFILES_DIRS = [
#     str(APPS_DIR.path("static")),
#     str(GIT_ROOT_DIR.path("frontend", "build", "static")),
# ]
STATIC_URL = "/static/"
# STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# STATICFILES_DIRS = [
#     BASE_DIR / "static",
# ]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 미디어 업로드 관련 세팅
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# 이메일 인증 세팅
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = True  # TLS 보안 설정
EMAIL_HOST = "smtp.gmail.com"  # 메일 호스트 서버
EMAIL_PORT = "587"  # 서버 포트
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")  # 우리가 사용할 Gmail
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")  # 우리가 사용할 Gmail p
SERVER_EMAIL = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER  # 응답 메일 관련 설정

# CORS 관련 추가
CORS_ORIGIN_WHITELIST = [

]
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

###########################AWS
AWS_ACCESS_KEY_ID = os.environ.get(
    "AWS_ACCESS_KEY_ID"
)  # .csv 파일에 있는 내용을 입력 Access key ID
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_REGION = os.environ.get("AWS_REGION")

###S3 Storages

AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")  # 설정한 버킷 이름
AWS_STORAGE_TEMP_BUCKET_NAME = os.environ.get(
    "AWS_STORAGE_TEMP_BUCKET_NAME"
)  # 설정한 TEMP 버킷 이름
AWS_S3_URL = "https://%s.s3.%s.amazonaws.com" % (AWS_STORAGE_BUCKET_NAME, AWS_REGION)
AWS_TEMP_S3_URL = "https://%s.s3.%s.amazonaws.com" % (
    AWS_STORAGE_TEMP_BUCKET_NAME,
    AWS_REGION,
)
AWS_S3_URL_PROTOCOL = os.environ.get("AWS_S3_URL_PROTOCOL")
AWS_S3_CUSTOM_DOMAIN = os.environ.get("AWS_S3_CUSTOM_DOMAIN")
AWS_REGION = os.environ.get("AWS_REGION")
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
AWS_QUERYSTRING_AUTH = False
AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",
}
SIGNATURE_VERSION = "s3v4"

algorithm = "HS256"


# SECURITY WARNING: don't run with debug turned on in production!
ALLOWED_HOSTS = ["*"]
DEBUG = os.environ.get("DEBUG") in ("True", "true", "1")
ENVIRONMENT = os.environ.get("ENVIRONMENT", default="development")

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ.get("RDS_NAME"),
        "USER": os.environ.get("RDS_USER"),
        "PASSWORD": os.environ.get("RDS_PASSWORD"),
        "HOST": os.environ.get("RDS_HOST"),
        "PORT": "3306",
        "OPTIONS": {"charset": "utf8mb4"},
    }
}

if ENVIRONMENT == "local":
    pass
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
            },
        },
        "loggers": {
            "django": {
                "handlers": [
                    "console",
                ],
                "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            },
            "django.db.backends": {
                "handlers": ["console"],
                "level": "DEBUG",
                "propagate": False,
            },
        },
    }

# rabbitmq
RMQ_USER = os.environ.get("RMQ_USER")
RMQ_PASSWORD = os.environ.get("RMQ_PASSWORD")
RMQ_URL = os.environ.get("RMQ_URL")
# CELERY
# CELERY_BROKER_URL = 'amqp://[user_name]:[password]@localhost/[vhost_name]'
CELERY_BROKER_URL = f"amqp://{RMQ_USER}:{RMQ_PASSWORD}@{RMQ_URL}"
#CELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672//'
CELERY_RESULT_BACKEND = "django-db"
CELERY_CACHE_BACKEND = "django-cache"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TAST_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "Asia/Seoul"
CELERY_ENABLE_UTC = (False,)


DJANGO_CELERY_RESULTS_TASK_ID_MAX_LENGTH = 191